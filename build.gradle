import java.time.Duration

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.3.9.RELEASE'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'pl.allegro.tech.build.axion-release' version '1.12.1'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
    id 'signing'
}

repositories {
    mavenCentral()
}

group = 'pl.allegro.tech.boot'
version = scmVersion.version

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.encoding = 'UTF-8'
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    api 'org.springframework.boot:spring-boot-starter-aop'
    api 'org.springframework.boot:spring-boot-autoconfigure'
    api 'org.slf4j:slf4j-api:1.7.30'
    api('org.apache.curator:curator-recipes:5.1.0')
    api('org.apache.curator:curator-framework:5.1.0') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    testImplementation 'org.springframework.boot:spring-boot'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation platform('org.junit:junit-bom:5.7.1')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation platform('org.testcontainers:testcontainers-bom:1.15.2')
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'

    testImplementation 'org.apache.zookeeper:zookeeper:3.6.2'
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'leader-only-spring-boot-starter'
                description = 'Spring Boot starter for leader only processing'
                url = 'https://github.com/allegro/leader-only-spring-boot-starter'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'wpanas'
                        name = 'Waldemar Panas'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:allegro/leader-only-spring-boot-starter.git'
                    developerConnection = 'scm:git@github.com:allegro/leader-only-spring-boot-starter.git'
                    url = 'https://github.com/allegro/leader-only-spring-boot-starter'
                }
            }
        }
    }
}

nexusPublishing {
    connectTimeout = Duration.ofMinutes(5)
    clientTimeout = Duration.ofMinutes(5)

    repositories {
        sonatype {
            username = System.getenv("SONATYPE_USERNAME")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
    transitionCheckOptions {
        maxRetries.set(15)
        delayBetween.set(Duration.ofSeconds(5))
    }
}

signing {
    useInMemoryPgpKeys(
            System.getenv("GPG_KEY_ID"),
            System.getenv("GPG_PRIVATE_KEY"),
            System.getenv("GPG_PRIVATE_KEY_PASSWORD")
    )
    sign publishing.publications.mavenJava
}